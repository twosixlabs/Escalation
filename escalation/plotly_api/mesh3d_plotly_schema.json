{
    "attributes": {
        "visible": {
            "type": "string",
            "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
            "default": true,
            "enum": [
                true,
                false,
                "legendonly"
            ]
        },
        "legendgroup": {
            "type": "string",
            "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
            "default": ""
        },
        "name": {
            "type": "string",
            "description": "Sets the trace name. The trace name appear as the legend item and on hover."
        },
        "meta": {
            "type": "string",
            "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index."
        },
        "hoverlabel": {
            "type": "object",
            "properties": {
                "bgcolor": {
                    "type": "string",
                    "description": "Sets the background color of the hover labels for this trace"
                },
                "bordercolor": {
                    "type": "string",
                    "description": "Sets the border color of the hover labels for this trace."
                },
                "font": {
                    "type": "object",
                    "properties": {
                        "family": {
                            "type": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                        },
                        "size": {
                            "type": "number",
                            "minimum": 1
                        },
                        "color": {
                            "type": "string"
                        }
                    }
                },
                "align": {
                    "type": "string",
                    "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
                    "default": "auto",
                    "enum": [
                        "left",
                        "right",
                        "auto"
                    ]
                },
                "namelength": {
                    "type": "integer",
                    "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
                    "default": 15,
                    "minimum": -1
                }
            }
        },
        "uirevision": {
            "type": "string",
            "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "x": {
            "type": "string",
            "description": "Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex."
        },
        "y": {
            "type": "string",
            "description": "Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex."
        },
        "z": {
            "type": "string",
            "description": "Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex."
        },
        "i": {
            "type": "string",
            "description": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle."
        },
        "j": {
            "type": "string",
            "description": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}`  together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle."
        },
        "k": {
            "type": "string",
            "description": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet  `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle."
        },
        "text": {
            "type": "string",
            "description": "Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
            "default": ""
        },
        "hovertemplate": {
            "type": "string",
            "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
            "default": ""
        },
        "delaunayaxis": {
            "type": "string",
            "description": "Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.",
            "default": "z",
            "enum": [
                "x",
                "y",
                "z"
            ]
        },
        "alphahull": {
            "type": "number",
            "description": "Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If *-1*, Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.",
            "default": -1
        },
        "intensity": {
            "type": "string",
            "description": "Sets the intensity values for vertices or cells as defined by `intensitymode`. It can be used for plotting fields on meshes."
        },
        "intensitymode": {
            "type": "string",
            "description": "Determines the source of `intensity` values.",
            "default": "vertex",
            "enum": [
                "vertex",
                "cell"
            ]
        },
        "color": {
            "type": "string",
            "description": "Sets the color of the whole mesh"
        },
        "vertexcolor": {
            "type": "string",
            "description": "Sets the color of each vertex Overrides *color*. While Red, green and blue colors are in the range of 0 and 255; in the case of having vertex color data in RGBA format, the alpha color should be normalized to be between 0 and 1."
        },
        "facecolor": {
            "type": "string",
            "description": "Sets the color of each face Overrides *color* and *vertexcolor*."
        },
        "cauto": {
            "type": "boolean",
            "description": "Determines whether or not the color domain is computed with respect to the input data (here `intensity`) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.",
            "default": true
        },
        "cmin": {
            "type": "number",
            "description": "Sets the lower bound of the color domain. Value should have the same units as `intensity` and if set, `cmax` must be set as well.",
            "default": null
        },
        "cmax": {
            "type": "number",
            "description": "Sets the upper bound of the color domain. Value should have the same units as `intensity` and if set, `cmin` must be set as well.",
            "default": null
        },
        "cmid": {
            "type": "number",
            "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `intensity`. Has no effect when `cauto` is `false`.",
            "default": null
        },
        "colorscale": {
            "type": "string",
            "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.",
            "default": null
        },
        "autocolorscale": {
            "type": "boolean",
            "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
            "default": true
        },
        "reversescale": {
            "type": "boolean",
            "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
            "default": false
        },
        "showscale": {
            "type": "boolean",
            "description": "Determines whether or not a colorbar is displayed for this trace.",
            "default": true
        },
        "colorbar": {
            "type": "object",
            "properties": {
                "thicknessmode": {
                    "type": "string",
                    "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                    "default": "pixels",
                    "enum": [
                        "fraction",
                        "pixels"
                    ]
                },
                "thickness": {
                    "type": "number",
                    "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                    "default": 30,
                    "minimum": 0
                },
                "lenmode": {
                    "type": "string",
                    "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                    "default": "fraction",
                    "enum": [
                        "fraction",
                        "pixels"
                    ]
                },
                "len": {
                    "type": "number",
                    "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                    "default": 1,
                    "minimum": 0
                },
                "x": {
                    "type": "number",
                    "description": "Sets the x position of the color bar (in plot fraction).",
                    "default": 1.02,
                    "minimum": -2,
                    "maximum": 3
                },
                "xanchor": {
                    "type": "string",
                    "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                    "default": "left",
                    "enum": [
                        "left",
                        "center",
                        "right"
                    ]
                },
                "xpad": {
                    "type": "number",
                    "description": "Sets the amount of padding (in px) along the x direction.",
                    "default": 10,
                    "minimum": 0
                },
                "y": {
                    "type": "number",
                    "description": "Sets the y position of the color bar (in plot fraction).",
                    "default": 0.5,
                    "minimum": -2,
                    "maximum": 3
                },
                "yanchor": {
                    "type": "string",
                    "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                    "default": "middle",
                    "enum": [
                        "top",
                        "middle",
                        "bottom"
                    ]
                },
                "ypad": {
                    "type": "number",
                    "description": "Sets the amount of padding (in px) along the y direction.",
                    "default": 10,
                    "minimum": 0
                },
                "outlinecolor": {
                    "type": "string",
                    "description": "Sets the axis line color.",
                    "default": "#444"
                },
                "outlinewidth": {
                    "type": "number",
                    "description": "Sets the width (in px) of the axis line.",
                    "default": 1,
                    "minimum": 0
                },
                "bordercolor": {
                    "type": "string",
                    "description": "Sets the axis line color.",
                    "default": "#444"
                },
                "borderwidth": {
                    "type": "number",
                    "description": "Sets the width (in px) or the border enclosing this color bar.",
                    "default": 0,
                    "minimum": 0
                },
                "bgcolor": {
                    "type": "string",
                    "description": "Sets the color of padded area.",
                    "default": "rgba(0,0,0,0)"
                },
                "tickmode": {
                    "type": "string",
                    "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                    "enum": [
                        "auto",
                        "linear",
                        "array"
                    ]
                },
                "nticks": {
                    "type": "integer",
                    "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                    "default": 0,
                    "minimum": 0
                },
                "tick0": {
                    "type": "string",
                    "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
                },
                "dtick": {
                    "type": "string",
                    "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
                },
                "tickvals": {
                    "type": "string",
                    "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                },
                "ticktext": {
                    "type": "string",
                    "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."
                },
                "ticks": {
                    "type": "string",
                    "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                    "default": "",
                    "enum": [
                        "outside",
                        "inside",
                        ""
                    ]
                },
                "ticklabelposition": {
                    "type": "string",
                    "description": "Determines where tick labels are drawn.",
                    "default": "outside",
                    "enum": [
                        "outside",
                        "inside",
                        "outside top",
                        "inside top",
                        "outside bottom",
                        "inside bottom"
                    ]
                },
                "ticklen": {
                    "type": "number",
                    "description": "Sets the tick length (in px).",
                    "default": 5,
                    "minimum": 0
                },
                "tickwidth": {
                    "type": "number",
                    "description": "Sets the tick width (in px).",
                    "default": 1,
                    "minimum": 0
                },
                "tickcolor": {
                    "type": "string",
                    "description": "Sets the tick color.",
                    "default": "#444"
                },
                "showticklabels": {
                    "type": "boolean",
                    "description": "Determines whether or not the tick labels are drawn.",
                    "default": true
                },
                "tickfont": {
                    "type": "object",
                    "properties": {
                        "family": {
                            "type": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                        },
                        "size": {
                            "type": "number",
                            "minimum": 1
                        },
                        "color": {
                            "type": "string"
                        }
                    }
                },
                "tickangle": {
                    "type": "number",
                    "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                    "default": "auto",
                    "minimum": -180,
                    "maximum": 180
                },
                "tickformat": {
                    "type": "string",
                    "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                    "default": ""
                },
                "tickprefix": {
                    "type": "string",
                    "description": "Sets a tick label prefix.",
                    "default": ""
                },
                "showtickprefix": {
                    "type": "string",
                    "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                    "default": "all",
                    "enum": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ]
                },
                "ticksuffix": {
                    "type": "string",
                    "description": "Sets a tick label suffix.",
                    "default": ""
                },
                "showticksuffix": {
                    "type": "string",
                    "description": "Same as `showtickprefix` but for tick suffixes.",
                    "default": "all",
                    "enum": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ]
                },
                "separatethousands": {
                    "type": "boolean",
                    "description": "If \"true\", even 4-digit integers are separated",
                    "default": false
                },
                "exponentformat": {
                    "type": "string",
                    "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                    "default": "B",
                    "enum": [
                        "none",
                        "e",
                        "E",
                        "power",
                        "SI",
                        "B"
                    ]
                },
                "minexponent": {
                    "type": "number",
                    "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                    "default": 3,
                    "minimum": 0
                },
                "showexponent": {
                    "type": "string",
                    "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                    "default": "all",
                    "enum": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ]
                },
                "title": {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated."
                        },
                        "font": {
                            "type": "object",
                            "properties": {
                                "family": {
                                    "type": "string",
                                    "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                                },
                                "size": {
                                    "type": "number",
                                    "minimum": 1
                                },
                                "color": {
                                    "type": "string"
                                }
                            }
                        },
                        "side": {
                            "type": "string",
                            "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
                            "default": "top",
                            "enum": [
                                "right",
                                "top",
                                "bottom"
                            ]
                        }
                    }
                }
            }
        },
        "coloraxis": {
            "type": "string",
            "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
            "default": null
        },
        "opacity": {
            "type": "number",
            "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
            "default": 1,
            "minimum": 0,
            "maximum": 1
        },
        "flatshading": {
            "type": "boolean",
            "description": "Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.",
            "default": false
        },
        "contour": {
            "type": "object",
            "properties": {
                "show": {
                    "type": "boolean",
                    "description": "Sets whether or not dynamic contours are shown on hover",
                    "default": false
                },
                "color": {
                    "type": "string",
                    "description": "Sets the color of the contour lines.",
                    "default": "#444"
                },
                "width": {
                    "type": "number",
                    "description": "Sets the width of the contour lines.",
                    "default": 2,
                    "minimum": 1,
                    "maximum": 16
                }
            }
        },
        "lightposition": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "number",
                    "description": "Numeric vector, representing the X coordinate for each vertex.",
                    "default": 100000,
                    "minimum": -100000,
                    "maximum": 100000
                },
                "y": {
                    "type": "number",
                    "description": "Numeric vector, representing the Y coordinate for each vertex.",
                    "default": 100000,
                    "minimum": -100000,
                    "maximum": 100000
                },
                "z": {
                    "type": "number",
                    "description": "Numeric vector, representing the Z coordinate for each vertex.",
                    "default": 0,
                    "minimum": -100000,
                    "maximum": 100000
                }
            }
        },
        "lighting": {
            "type": "object",
            "properties": {
                "vertexnormalsepsilon": {
                    "type": "number",
                    "description": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.",
                    "default": 1e-12,
                    "minimum": 0,
                    "maximum": 1
                },
                "facenormalsepsilon": {
                    "type": "number",
                    "description": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.",
                    "default": 1e-06,
                    "minimum": 0,
                    "maximum": 1
                },
                "ambient": {
                    "type": "number",
                    "description": "Ambient light increases overall color visibility but can wash out the image.",
                    "default": 0.8,
                    "minimum": 0,
                    "maximum": 1
                },
                "diffuse": {
                    "type": "number",
                    "description": "Represents the extent that incident rays are reflected in a range of angles.",
                    "default": 0.8,
                    "minimum": 0,
                    "maximum": 1
                },
                "specular": {
                    "type": "number",
                    "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
                    "default": 0.05,
                    "minimum": 0,
                    "maximum": 2
                },
                "roughness": {
                    "type": "number",
                    "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
                    "default": 0.5,
                    "minimum": 0,
                    "maximum": 1
                },
                "fresnel": {
                    "type": "number",
                    "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
                    "default": 0.2,
                    "minimum": 0,
                    "maximum": 5
                }
            }
        },
        "hoverinfo": {
            "type": "string",
            "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
            "default": "all",
            "enum": [
                "name",
                "text",
                "text+name",
                "z",
                "z+name",
                "z+text",
                "z+text+name",
                "y",
                "y+name",
                "y+text",
                "y+text+name",
                "y+z",
                "y+z+name",
                "y+z+text",
                "y+z+text+name",
                "x",
                "x+name",
                "x+text",
                "x+text+name",
                "x+z",
                "x+z+name",
                "x+z+text",
                "x+z+text+name",
                "x+y",
                "x+y+name",
                "x+y+text",
                "x+y+text+name",
                "x+y+z",
                "x+y+z+name",
                "x+y+z+text",
                "x+y+z+text+name",
                "all",
                "none",
                "skip"
            ]
        },
        "showlegend": {
            "type": "boolean",
            "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
            "default": false
        },
        "xcalendar": {
            "type": "string",
            "description": "Sets the calendar system to use with `x` date data.",
            "default": "gregorian",
            "enum": [
                "gregorian",
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "hebrew",
                "islamic",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "jalali",
                "taiwan",
                "thai",
                "ummalqura"
            ]
        },
        "ycalendar": {
            "type": "string",
            "description": "Sets the calendar system to use with `y` date data.",
            "default": "gregorian",
            "enum": [
                "gregorian",
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "hebrew",
                "islamic",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "jalali",
                "taiwan",
                "thai",
                "ummalqura"
            ]
        },
        "zcalendar": {
            "type": "string",
            "description": "Sets the calendar system to use with `z` date data.",
            "default": "gregorian",
            "enum": [
                "gregorian",
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "hebrew",
                "islamic",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "jalali",
                "taiwan",
                "thai",
                "ummalqura"
            ]
        },
        "scene": {
            "type": "string",
            "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
            "default": "scene"
        }
    }
}