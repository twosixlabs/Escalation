{
    "attributes": {
        "visible": {
            "type": "string",
            "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
            "default": true,
            "enum": [
                true,
                false,
                "legendonly"
            ]
        },
        "showlegend": {
            "type": "boolean",
            "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
            "default": true
        },
        "legendgroup": {
            "type": "string",
            "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
            "default": ""
        },
        "opacity": {
            "type": "number",
            "description": "Sets the opacity of the trace.",
            "default": 1,
            "minimum": 0,
            "maximum": 1
        },
        "name": {
            "type": "string",
            "description": "Sets the trace name. The trace name appear as the legend item and on hover."
        },
        "customdata": {
            "type": "string",
            "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements"
        },
        "meta": {
            "type": "string",
            "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index."
        },
        "selectedpoints": {
            "type": "string",
            "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "hoverinfo": {
            "type": "string",
            "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
            "default": "all",
            "enum": [
                "name",
                "text",
                "text+name",
                "z",
                "z+name",
                "z+text",
                "z+text+name",
                "y",
                "y+name",
                "y+text",
                "y+text+name",
                "y+z",
                "y+z+name",
                "y+z+text",
                "y+z+text+name",
                "x",
                "x+name",
                "x+text",
                "x+text+name",
                "x+z",
                "x+z+name",
                "x+z+text",
                "x+z+text+name",
                "x+y",
                "x+y+name",
                "x+y+text",
                "x+y+text+name",
                "x+y+z",
                "x+y+z+name",
                "x+y+z+text",
                "x+y+z+text+name",
                "all",
                "none",
                "skip"
            ]
        },
        "hoverlabel": {
            "type": "object",
            "properties": {
                "bgcolor": {
                    "type": "string",
                    "description": "Sets the background color of the hover labels for this trace"
                },
                "bordercolor": {
                    "type": "string",
                    "description": "Sets the border color of the hover labels for this trace."
                },
                "font": {
                    "type": "object",
                    "properties": {
                        "family": {
                            "type": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                        },
                        "size": {
                            "type": "number",
                            "minimum": 1
                        },
                        "color": {
                            "type": "string"
                        }
                    }
                },
                "align": {
                    "type": "string",
                    "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
                    "default": "auto",
                    "enum": [
                        "left",
                        "right",
                        "auto"
                    ]
                },
                "namelength": {
                    "type": "integer",
                    "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
                    "default": 15,
                    "minimum": -1
                }
            }
        },
        "uirevision": {
            "type": "string",
            "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "x": {
            "type": "string",
            "description": "Sets the x coordinates."
        },
        "x0": {
            "type": "string",
            "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
            "default": 0
        },
        "dx": {
            "type": "number",
            "description": "Sets the x coordinate step. See `x0` for more info.",
            "default": 1
        },
        "y": {
            "type": "string",
            "description": "Sets the y coordinates."
        },
        "y0": {
            "type": "string",
            "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
            "default": 0
        },
        "dy": {
            "type": "number",
            "description": "Sets the y coordinate step. See `y0` for more info.",
            "default": 1
        },
        "xperiod": {
            "type": "string",
            "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
            "default": 0
        },
        "yperiod": {
            "type": "string",
            "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
            "default": 0
        },
        "xperiod0": {
            "type": "string",
            "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "yperiod0": {
            "type": "string",
            "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "xperiodalignment": {
            "type": "string",
            "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
            "default": "middle",
            "enum": [
                "start",
                "middle",
                "end"
            ]
        },
        "yperiodalignment": {
            "type": "string",
            "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
            "default": "middle",
            "enum": [
                "start",
                "middle",
                "end"
            ]
        },
        "text": {
            "type": "string",
            "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
            "default": ""
        },
        "texttemplate": {
            "type": "string",
            "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `value` and `label`.",
            "default": ""
        },
        "textposition": {
            "type": "string",
            "description": "Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. *auto* tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside.",
            "default": "none",
            "enum": [
                "inside",
                "outside",
                "auto",
                "none"
            ]
        },
        "insidetextanchor": {
            "type": "string",
            "description": "Determines if texts are kept at center or start/end points in `textposition` *inside* mode.",
            "default": "end",
            "enum": [
                "end",
                "middle",
                "start"
            ]
        },
        "textangle": {
            "type": "number",
            "description": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With *auto* the texts may automatically be rotated to fit with the maximum size in bars.",
            "default": "auto",
            "minimum": -180,
            "maximum": 180
        },
        "textfont": {
            "type": "object",
            "properties": {
                "family": {
                    "type": "string",
                    "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                },
                "size": {
                    "type": "number",
                    "minimum": 1
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "insidetextfont": {
            "type": "object",
            "properties": {
                "family": {
                    "type": "string",
                    "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                },
                "size": {
                    "type": "number",
                    "minimum": 1
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "outsidetextfont": {
            "type": "object",
            "properties": {
                "family": {
                    "type": "string",
                    "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                },
                "size": {
                    "type": "number",
                    "minimum": 1
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "constraintext": {
            "type": "string",
            "description": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.",
            "default": "both",
            "enum": [
                "inside",
                "outside",
                "both",
                "none"
            ]
        },
        "cliponaxis": {
            "type": "boolean",
            "description": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
            "default": true
        },
        "orientation": {
            "type": "string",
            "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).",
            "enum": [
                "v",
                "h"
            ]
        },
        "base": {
            "type": "string",
            "description": "Sets where the bar base is drawn (in position axis units). In *stack* or *relative* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.",
            "default": null
        },
        "offset": {
            "type": "number",
            "description": "Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.",
            "default": null
        },
        "width": {
            "type": "number",
            "description": "Sets the bar width (in position axis units).",
            "default": null,
            "minimum": 0
        },
        "marker": {
            "type": "object",
            "properties": {
                "line": {
                    "type": "object",
                    "properties": {
                        "width": {
                            "type": "number",
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "default": 0,
                            "minimum": 0
                        },
                        "color": {
                            "type": "string",
                            "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set."
                        },
                        "cauto": {
                            "type": "boolean",
                            "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
                            "default": true
                        },
                        "cmin": {
                            "type": "number",
                            "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
                            "default": null
                        },
                        "cmax": {
                            "type": "number",
                            "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
                            "default": null
                        },
                        "cmid": {
                            "type": "number",
                            "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
                            "default": null
                        },
                        "colorscale": {
                            "type": "string",
                            "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.",
                            "default": null
                        },
                        "autocolorscale": {
                            "type": "boolean",
                            "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                            "default": true
                        },
                        "reversescale": {
                            "type": "boolean",
                            "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
                            "default": false
                        },
                        "coloraxis": {
                            "type": "string",
                            "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                            "default": null
                        }
                    }
                },
                "color": {
                    "type": "string",
                    "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set."
                },
                "cauto": {
                    "type": "boolean",
                    "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                    "default": true
                },
                "cmin": {
                    "type": "number",
                    "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                    "default": null
                },
                "cmax": {
                    "type": "number",
                    "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                    "default": null
                },
                "cmid": {
                    "type": "number",
                    "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                    "default": null
                },
                "colorscale": {
                    "type": "string",
                    "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.",
                    "default": null
                },
                "autocolorscale": {
                    "type": "boolean",
                    "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                    "default": true
                },
                "reversescale": {
                    "type": "boolean",
                    "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                    "default": false
                },
                "showscale": {
                    "type": "boolean",
                    "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
                    "default": false
                },
                "colorbar": {
                    "type": "object",
                    "properties": {
                        "thicknessmode": {
                            "type": "string",
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "default": "pixels",
                            "enum": [
                                "fraction",
                                "pixels"
                            ]
                        },
                        "thickness": {
                            "type": "number",
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "default": 30,
                            "minimum": 0
                        },
                        "lenmode": {
                            "type": "string",
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "default": "fraction",
                            "enum": [
                                "fraction",
                                "pixels"
                            ]
                        },
                        "len": {
                            "type": "number",
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "default": 1,
                            "minimum": 0
                        },
                        "x": {
                            "type": "number",
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "default": 1.02,
                            "minimum": -2,
                            "maximum": 3
                        },
                        "xanchor": {
                            "type": "string",
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "default": "left",
                            "enum": [
                                "left",
                                "center",
                                "right"
                            ]
                        },
                        "xpad": {
                            "type": "number",
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "default": 10,
                            "minimum": 0
                        },
                        "y": {
                            "type": "number",
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "default": 0.5,
                            "minimum": -2,
                            "maximum": 3
                        },
                        "yanchor": {
                            "type": "string",
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "default": "middle",
                            "enum": [
                                "top",
                                "middle",
                                "bottom"
                            ]
                        },
                        "ypad": {
                            "type": "number",
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "default": 10,
                            "minimum": 0
                        },
                        "outlinecolor": {
                            "type": "string",
                            "description": "Sets the axis line color.",
                            "default": "#444"
                        },
                        "outlinewidth": {
                            "type": "number",
                            "description": "Sets the width (in px) of the axis line.",
                            "default": 1,
                            "minimum": 0
                        },
                        "bordercolor": {
                            "type": "string",
                            "description": "Sets the axis line color.",
                            "default": "#444"
                        },
                        "borderwidth": {
                            "type": "number",
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "default": 0,
                            "minimum": 0
                        },
                        "bgcolor": {
                            "type": "string",
                            "description": "Sets the color of padded area.",
                            "default": "rgba(0,0,0,0)"
                        },
                        "tickmode": {
                            "type": "string",
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "enum": [
                                "auto",
                                "linear",
                                "array"
                            ]
                        },
                        "nticks": {
                            "type": "integer",
                            "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                            "default": 0,
                            "minimum": 0
                        },
                        "tick0": {
                            "type": "string",
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
                        },
                        "dtick": {
                            "type": "string",
                            "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
                        },
                        "tickvals": {
                            "type": "string",
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                        },
                        "ticktext": {
                            "type": "string",
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."
                        },
                        "ticks": {
                            "type": "string",
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "default": "",
                            "enum": [
                                "outside",
                                "inside",
                                ""
                            ]
                        },
                        "ticklabelposition": {
                            "type": "string",
                            "description": "Determines where tick labels are drawn.",
                            "default": "outside",
                            "enum": [
                                "outside",
                                "inside",
                                "outside top",
                                "inside top",
                                "outside bottom",
                                "inside bottom"
                            ]
                        },
                        "ticklen": {
                            "type": "number",
                            "description": "Sets the tick length (in px).",
                            "default": 5,
                            "minimum": 0
                        },
                        "tickwidth": {
                            "type": "number",
                            "description": "Sets the tick width (in px).",
                            "default": 1,
                            "minimum": 0
                        },
                        "tickcolor": {
                            "type": "string",
                            "description": "Sets the tick color.",
                            "default": "#444"
                        },
                        "showticklabels": {
                            "type": "boolean",
                            "description": "Determines whether or not the tick labels are drawn.",
                            "default": true
                        },
                        "tickfont": {
                            "type": "object",
                            "properties": {
                                "family": {
                                    "type": "string",
                                    "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                                },
                                "size": {
                                    "type": "number",
                                    "minimum": 1
                                },
                                "color": {
                                    "type": "string"
                                }
                            }
                        },
                        "tickangle": {
                            "type": "number",
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "default": "auto",
                            "minimum": -180,
                            "maximum": 180
                        },
                        "tickformat": {
                            "type": "string",
                            "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                            "default": ""
                        },
                        "tickprefix": {
                            "type": "string",
                            "description": "Sets a tick label prefix.",
                            "default": ""
                        },
                        "showtickprefix": {
                            "type": "string",
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "default": "all",
                            "enum": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ]
                        },
                        "ticksuffix": {
                            "type": "string",
                            "description": "Sets a tick label suffix.",
                            "default": ""
                        },
                        "showticksuffix": {
                            "type": "string",
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "default": "all",
                            "enum": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ]
                        },
                        "separatethousands": {
                            "type": "boolean",
                            "description": "If \"true\", even 4-digit integers are separated",
                            "default": false
                        },
                        "exponentformat": {
                            "type": "string",
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "default": "B",
                            "enum": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ]
                        },
                        "minexponent": {
                            "type": "number",
                            "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                            "default": 3,
                            "minimum": 0
                        },
                        "showexponent": {
                            "type": "string",
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "default": "all",
                            "enum": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ]
                        },
                        "title": {
                            "type": "object",
                            "properties": {
                                "text": {
                                    "type": "string",
                                    "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated."
                                },
                                "font": {
                                    "type": "object",
                                    "properties": {
                                        "family": {
                                            "type": "string",
                                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                                        },
                                        "size": {
                                            "type": "number",
                                            "minimum": 1
                                        },
                                        "color": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "side": {
                                    "type": "string",
                                    "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
                                    "default": "top",
                                    "enum": [
                                        "right",
                                        "top",
                                        "bottom"
                                    ]
                                }
                            }
                        }
                    }
                },
                "coloraxis": {
                    "type": "string",
                    "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                    "default": null
                },
                "opacity": {
                    "type": "number",
                    "description": "Sets the opacity of the bars.",
                    "default": 1,
                    "minimum": 0,
                    "maximum": 1
                }
            }
        },
        "offsetgroup": {
            "type": "string",
            "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
            "default": ""
        },
        "alignmentgroup": {
            "type": "string",
            "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
            "default": ""
        },
        "selected": {
            "type": "object",
            "properties": {
                "marker": {
                    "type": "object",
                    "properties": {
                        "opacity": {
                            "type": "number",
                            "description": "Sets the marker opacity of selected points.",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "color": {
                            "type": "string",
                            "description": "Sets the marker color of selected points."
                        }
                    }
                },
                "textfont": {
                    "type": "object",
                    "properties": {
                        "color": {
                            "type": "string",
                            "description": "Sets the text font color of selected points."
                        }
                    }
                }
            }
        },
        "unselected": {
            "type": "object",
            "properties": {
                "marker": {
                    "type": "object",
                    "properties": {
                        "opacity": {
                            "type": "number",
                            "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "color": {
                            "type": "string",
                            "description": "Sets the marker color of unselected points, applied only when a selection exists."
                        }
                    }
                },
                "textfont": {
                    "type": "object",
                    "properties": {
                        "color": {
                            "type": "string",
                            "description": "Sets the text font color of unselected points, applied only when a selection exists."
                        }
                    }
                }
            }
        },
        "error_x": {
            "type": "object",
            "properties": {
                "visible": {
                    "type": "boolean",
                    "description": "Determines whether or not this set of error bars is visible."
                },
                "type": {
                    "type": "string",
                    "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                    "enum": [
                        "percent",
                        "constant",
                        "sqrt",
                        "data"
                    ]
                },
                "symmetric": {
                    "type": "boolean",
                    "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
                },
                "array": {
                    "type": "string",
                    "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."
                },
                "arrayminus": {
                    "type": "string",
                    "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."
                },
                "value": {
                    "type": "number",
                    "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                    "default": 10,
                    "minimum": 0
                },
                "valueminus": {
                    "type": "number",
                    "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                    "default": 10,
                    "minimum": 0
                },
                "traceref": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0
                },
                "tracerefminus": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0
                },
                "copy_ystyle": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string",
                    "description": "Sets the stoke color of the error bars."
                },
                "thickness": {
                    "type": "number",
                    "description": "Sets the thickness (in px) of the error bars.",
                    "default": 2,
                    "minimum": 0
                },
                "width": {
                    "type": "number",
                    "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                    "minimum": 0
                }
            }
        },
        "error_y": {
            "type": "object",
            "properties": {
                "visible": {
                    "type": "boolean",
                    "description": "Determines whether or not this set of error bars is visible."
                },
                "type": {
                    "type": "string",
                    "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                    "enum": [
                        "percent",
                        "constant",
                        "sqrt",
                        "data"
                    ]
                },
                "symmetric": {
                    "type": "boolean",
                    "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars."
                },
                "array": {
                    "type": "string",
                    "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data."
                },
                "arrayminus": {
                    "type": "string",
                    "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data."
                },
                "value": {
                    "type": "number",
                    "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                    "default": 10,
                    "minimum": 0
                },
                "valueminus": {
                    "type": "number",
                    "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                    "default": 10,
                    "minimum": 0
                },
                "traceref": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0
                },
                "tracerefminus": {
                    "type": "integer",
                    "default": 0,
                    "minimum": 0
                },
                "color": {
                    "type": "string",
                    "description": "Sets the stoke color of the error bars."
                },
                "thickness": {
                    "type": "number",
                    "description": "Sets the thickness (in px) of the error bars.",
                    "default": 2,
                    "minimum": 0
                },
                "width": {
                    "type": "number",
                    "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                    "minimum": 0
                }
            }
        },
        "xcalendar": {
            "type": "string",
            "description": "Sets the calendar system to use with `x` date data.",
            "default": "gregorian",
            "enum": [
                "gregorian",
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "hebrew",
                "islamic",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "jalali",
                "taiwan",
                "thai",
                "ummalqura"
            ]
        },
        "ycalendar": {
            "type": "string",
            "description": "Sets the calendar system to use with `y` date data.",
            "default": "gregorian",
            "enum": [
                "gregorian",
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "hebrew",
                "islamic",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "jalali",
                "taiwan",
                "thai",
                "ummalqura"
            ]
        },
        "xaxis": {
            "type": "string",
            "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
            "default": "x"
        },
        "yaxis": {
            "type": "string",
            "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
            "default": "y"
        }
    },
    "layoutAttributes": {
        "barmode": {
            "type": "string",
            "description": "Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *relative*, the bars are stacked on top of one another, with negative values below the axis, positive values above With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars.",
            "default": "group",
            "enum": [
                "stack",
                "group",
                "overlay",
                "relative"
            ]
        },
        "barnorm": {
            "type": "string",
            "description": "Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divided by the sum of all values at that location coordinate. *percent* is the same but multiplied by 100 to show percentages.",
            "default": "",
            "enum": [
                "",
                "fraction",
                "percent"
            ]
        },
        "bargap": {
            "type": "number",
            "description": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.",
            "minimum": 0,
            "maximum": 1
        },
        "bargroupgap": {
            "type": "number",
            "description": "Sets the gap (in plot fraction) between bars of the same location coordinate.",
            "default": 0,
            "minimum": 0,
            "maximum": 1
        }
    }
}