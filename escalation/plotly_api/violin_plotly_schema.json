{
    "attributes": {
        "visible": {
            "type": "string",
            "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
            "default": true,
            "enum": [
                true,
                false,
                "legendonly"
            ]
        },
        "showlegend": {
            "type": "boolean",
            "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
            "default": true
        },
        "legendgroup": {
            "type": "string",
            "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
            "default": ""
        },
        "opacity": {
            "type": "number",
            "description": "Sets the opacity of the trace.",
            "default": 1,
            "minimum": 0,
            "maximum": 1
        },
        "meta": {
            "type": "string",
            "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index."
        },
        "selectedpoints": {
            "type": "string",
            "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "hoverinfo": {
            "type": "string",
            "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
            "default": "all",
            "enum": [
                "name",
                "text",
                "text+name",
                "z",
                "z+name",
                "z+text",
                "z+text+name",
                "y",
                "y+name",
                "y+text",
                "y+text+name",
                "y+z",
                "y+z+name",
                "y+z+text",
                "y+z+text+name",
                "x",
                "x+name",
                "x+text",
                "x+text+name",
                "x+z",
                "x+z+name",
                "x+z+text",
                "x+z+text+name",
                "x+y",
                "x+y+name",
                "x+y+text",
                "x+y+text+name",
                "x+y+z",
                "x+y+z+name",
                "x+y+z+text",
                "x+y+z+text+name",
                "all",
                "none",
                "skip"
            ]
        },
        "hoverlabel": {
            "type": "object",
            "properties": {
                "bgcolor": {
                    "type": "string",
                    "description": "Sets the background color of the hover labels for this trace"
                },
                "bordercolor": {
                    "type": "string",
                    "description": "Sets the border color of the hover labels for this trace."
                },
                "font": {
                    "type": "object",
                    "properties": {
                        "family": {
                            "type": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                        },
                        "size": {
                            "type": "number",
                            "minimum": 1
                        },
                        "color": {
                            "type": "string"
                        }
                    }
                },
                "align": {
                    "type": "string",
                    "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
                    "default": "auto",
                    "enum": [
                        "left",
                        "right",
                        "auto"
                    ]
                },
                "namelength": {
                    "type": "integer",
                    "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
                    "default": 15,
                    "minimum": -1
                }
            }
        },
        "uirevision": {
            "type": "string",
            "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "y": {
            "type": "string",
            "description": "Sets the y sample data or coordinates. See overview for more info."
        },
        "x": {
            "type": "string",
            "description": "Sets the x sample data or coordinates. See overview for more info."
        },
        "x0": {
            "type": "string",
            "description": "Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info."
        },
        "y0": {
            "type": "string",
            "description": "Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info."
        },
        "name": {
            "type": "string",
            "description": "Sets the trace name. The trace name appear as the legend item and on hover. For violin traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical. Note that the trace name is also used as a default value for attribute `scalegroup` (please see its description for details)."
        },
        "orientation": {
            "type": "string",
            "description": "Sets the orientation of the violin(s). If *v* (*h*), the distribution is visualized along the vertical (horizontal).",
            "enum": [
                "v",
                "h"
            ]
        },
        "bandwidth": {
            "type": "number",
            "description": "Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.",
            "minimum": 0
        },
        "scalegroup": {
            "type": "string",
            "description": "If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group. If a violin's `width` is undefined, `scalegroup` will default to the trace's name. In this case, violins with the same names will be linked together",
            "default": ""
        },
        "scalemode": {
            "type": "string",
            "description": "Sets the metric by which the width of each violin is determined.*width* means each violin has the same (max) width*count* means the violins are scaled by the number of sample points makingup each violin.",
            "default": "width",
            "enum": [
                "width",
                "count"
            ]
        },
        "spanmode": {
            "type": "string",
            "description": "Sets the method by which the span in data space where the density function will be computed. *soft* means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. *hard* means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode *manual* and fill in the `span` attribute.",
            "default": "soft",
            "enum": [
                "soft",
                "hard",
                "manual"
            ]
        },
        "span": {
            "type": "string",
            "description": "Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to *manual*."
        },
        "line": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Sets the color of line bounding the violin(s)."
                },
                "width": {
                    "type": "number",
                    "description": "Sets the width (in px) of line bounding the violin(s).",
                    "default": 2,
                    "minimum": 0
                }
            }
        },
        "fillcolor": {
            "type": "string",
            "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available."
        },
        "points": {
            "type": "string",
            "description": "If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the violins are shown with no sample points. Defaults to *suspectedoutliers* when `marker.outliercolor` or `marker.line.outliercolor` is set, otherwise defaults to *outliers*.",
            "enum": [
                "all",
                "outliers",
                "suspectedoutliers",
                false
            ]
        },
        "jitter": {
            "type": "number",
            "description": "Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the violins.",
            "minimum": 0,
            "maximum": 1
        },
        "pointpos": {
            "type": "number",
            "description": "Sets the position of the sample points in relation to the violins. If *0*, the sample points are places over the center of the violins. Positive (negative) values correspond to positions to the right (left) for vertical violins and above (below) for horizontal violins.",
            "minimum": -2,
            "maximum": 2
        },
        "width": {
            "type": "number",
            "description": "Sets the width of the violin in data coordinates. If *0* (default value) the width is automatically selected based on the positions of other violin traces in the same subplot.",
            "default": 0,
            "minimum": 0
        },
        "marker": {
            "type": "object",
            "properties": {
                "outliercolor": {
                    "type": "string",
                    "description": "Sets the color of the outlier sample points.",
                    "default": "rgba(0, 0, 0, 0)"
                },
                "symbol": {
                    "type": "string",
                    "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                    "default": "circle",
                    "enum": [
                        "circle",
                        "square",
                        "diamond",
                        "cross",
                        "x",
                        "triangle-up",
                        "triangle-down",
                        "pentagon",
                        "hexagon",
                        "octagon",
                        "star"
                    ]
                },
                "opacity": {
                    "type": "number",
                    "description": "Sets the marker opacity.",
                    "default": 1,
                    "minimum": 0,
                    "maximum": 1
                },
                "size": {
                    "type": "number",
                    "description": "Sets the marker size (in px).",
                    "default": 6,
                    "minimum": 0
                },
                "color": {
                    "type": "string",
                    "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set."
                },
                "line": {
                    "type": "object",
                    "properties": {
                        "color": {
                            "type": "string",
                            "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
                            "default": "#444"
                        },
                        "width": {
                            "type": "number",
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "default": 0,
                            "minimum": 0
                        },
                        "outliercolor": {
                            "type": "string",
                            "description": "Sets the border line color of the outlier sample points. Defaults to marker.color"
                        },
                        "outlierwidth": {
                            "type": "number",
                            "description": "Sets the border line width (in px) of the outlier sample points.",
                            "default": 1,
                            "minimum": 0
                        }
                    }
                }
            }
        },
        "text": {
            "type": "string",
            "description": "Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
            "default": ""
        },
        "hovertemplate": {
            "type": "string",
            "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
            "default": ""
        },
        "box": {
            "type": "object",
            "properties": {
                "visible": {
                    "type": "boolean",
                    "description": "Determines if an miniature box plot is drawn inside the violins. ",
                    "default": false
                },
                "width": {
                    "type": "number",
                    "description": "Sets the width of the inner box plots relative to the violins' width. For example, with 1, the inner box plots are as wide as the violins.",
                    "default": 0.25,
                    "minimum": 0,
                    "maximum": 1
                },
                "fillcolor": {
                    "type": "string",
                    "description": "Sets the inner box plot fill color."
                },
                "line": {
                    "type": "object",
                    "properties": {
                        "color": {
                            "type": "string",
                            "description": "Sets the inner box plot bounding line color."
                        },
                        "width": {
                            "type": "number",
                            "description": "Sets the inner box plot bounding line width.",
                            "minimum": 0
                        }
                    }
                }
            }
        },
        "meanline": {
            "type": "object",
            "properties": {
                "visible": {
                    "type": "boolean",
                    "description": "Determines if a line corresponding to the sample's mean is shown inside the violins. If `box.visible` is turned on, the mean line is drawn inside the inner box. Otherwise, the mean line is drawn from one side of the violin to other.",
                    "default": false
                },
                "color": {
                    "type": "string",
                    "description": "Sets the mean line color."
                },
                "width": {
                    "type": "number",
                    "description": "Sets the mean line width.",
                    "minimum": 0
                }
            }
        },
        "side": {
            "type": "string",
            "description": "Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under *overlay* mode, where one trace has `side` set to *positive* and the other to *negative*.",
            "default": "both",
            "enum": [
                "both",
                "positive",
                "negative"
            ]
        },
        "offsetgroup": {
            "type": "string",
            "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
            "default": ""
        },
        "alignmentgroup": {
            "type": "string",
            "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
            "default": ""
        },
        "selected": {
            "type": "object",
            "properties": {
                "marker": {
                    "type": "object",
                    "properties": {
                        "opacity": {
                            "type": "number",
                            "description": "Sets the marker opacity of selected points.",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "color": {
                            "type": "string",
                            "description": "Sets the marker color of selected points."
                        },
                        "size": {
                            "type": "number",
                            "description": "Sets the marker size of selected points.",
                            "minimum": 0
                        }
                    }
                }
            }
        },
        "unselected": {
            "type": "object",
            "properties": {
                "marker": {
                    "type": "object",
                    "properties": {
                        "opacity": {
                            "type": "number",
                            "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
                            "minimum": 0,
                            "maximum": 1
                        },
                        "color": {
                            "type": "string",
                            "description": "Sets the marker color of unselected points, applied only when a selection exists."
                        },
                        "size": {
                            "type": "number",
                            "description": "Sets the marker size of unselected points, applied only when a selection exists.",
                            "minimum": 0
                        }
                    }
                }
            }
        },
        "hoveron": {
            "type": "string",
            "description": "Do the hover effects highlight individual violins or sample points or the kernel density estimate or any combination of them?",
            "default": "violins+points+kde",
            "enum": [
                "kde",
                "points",
                "points+kde",
                "violins",
                "violins+kde",
                "violins+points",
                "violins+points+kde",
                "all"
            ]
        },
        "xaxis": {
            "type": "string",
            "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
            "default": "x"
        },
        "yaxis": {
            "type": "string",
            "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
            "default": "y"
        }
    },
    "layoutAttributes": {
        "violinmode": {
            "type": "string",
            "description": "Determines how violins at the same location coordinate are displayed on the graph. If *group*, the violins are plotted next to one another centered around the shared location. If *overlay*, the violins are plotted over one another, you might need to set *opacity* to see them multiple violins. Has no effect on traces that have *width* set.",
            "default": "overlay",
            "enum": [
                "group",
                "overlay"
            ]
        },
        "violingap": {
            "type": "number",
            "description": "Sets the gap (in plot fraction) between violins of adjacent location coordinates. Has no effect on traces that have *width* set.",
            "default": 0.3,
            "minimum": 0,
            "maximum": 1
        },
        "violingroupgap": {
            "type": "number",
            "description": "Sets the gap (in plot fraction) between violins of the same location coordinate. Has no effect on traces that have *width* set.",
            "default": 0.3,
            "minimum": 0,
            "maximum": 1
        }
    }
}