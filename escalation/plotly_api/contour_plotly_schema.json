{
    "attributes": {
        "visible": {
            "type": "string",
            "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
            "default": true,
            "enum": [
                true,
                false,
                "legendonly"
            ]
        },
        "showlegend": {
            "type": "boolean",
            "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
            "default": true
        },
        "legendgroup": {
            "type": "string",
            "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
            "default": ""
        },
        "opacity": {
            "type": "number",
            "description": "Sets the opacity of the trace.",
            "default": 1,
            "minimum": 0,
            "maximum": 1
        },
        "name": {
            "type": "string",
            "description": "Sets the trace name. The trace name appear as the legend item and on hover."
        },
        "customdata": {
            "type": "string",
            "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements"
        },
        "meta": {
            "type": "string",
            "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index."
        },
        "hoverinfo": {
            "type": "string",
            "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
            "default": "all",
            "enum": [
                "name",
                "text",
                "text+name",
                "z",
                "z+name",
                "z+text",
                "z+text+name",
                "y",
                "y+name",
                "y+text",
                "y+text+name",
                "y+z",
                "y+z+name",
                "y+z+text",
                "y+z+text+name",
                "x",
                "x+name",
                "x+text",
                "x+text+name",
                "x+z",
                "x+z+name",
                "x+z+text",
                "x+z+text+name",
                "x+y",
                "x+y+name",
                "x+y+text",
                "x+y+text+name",
                "x+y+z",
                "x+y+z+name",
                "x+y+z+text",
                "x+y+z+text+name",
                "all",
                "none",
                "skip"
            ]
        },
        "hoverlabel": {
            "type": "object",
            "properties": {
                "bgcolor": {
                    "type": "string",
                    "description": "Sets the background color of the hover labels for this trace"
                },
                "bordercolor": {
                    "type": "string",
                    "description": "Sets the border color of the hover labels for this trace."
                },
                "font": {
                    "type": "object",
                    "properties": {
                        "family": {
                            "type": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                        },
                        "size": {
                            "type": "number",
                            "minimum": 1
                        },
                        "color": {
                            "type": "string"
                        }
                    }
                },
                "align": {
                    "type": "string",
                    "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
                    "default": "auto",
                    "enum": [
                        "left",
                        "right",
                        "auto"
                    ]
                },
                "namelength": {
                    "type": "integer",
                    "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
                    "default": 15,
                    "minimum": -1
                }
            }
        },
        "uirevision": {
            "type": "string",
            "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "z": {
            "type": "string",
            "description": "Sets the z data."
        },
        "x": {
            "type": "string",
            "description": "Sets the x coordinates."
        },
        "x0": {
            "type": "string",
            "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
            "default": 0
        },
        "dx": {
            "type": "number",
            "description": "Sets the x coordinate step. See `x0` for more info.",
            "default": 1
        },
        "y": {
            "type": "string",
            "description": "Sets the y coordinates."
        },
        "y0": {
            "type": "string",
            "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
            "default": 0
        },
        "dy": {
            "type": "number",
            "description": "Sets the y coordinate step. See `y0` for more info.",
            "default": 1
        },
        "xperiod": {
            "type": "string",
            "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
            "default": 0
        },
        "yperiod": {
            "type": "string",
            "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
            "default": 0
        },
        "xperiod0": {
            "type": "string",
            "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "yperiod0": {
            "type": "string",
            "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "xperiodalignment": {
            "type": "string",
            "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
            "default": "middle",
            "enum": [
                "start",
                "middle",
                "end"
            ]
        },
        "yperiodalignment": {
            "type": "string",
            "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
            "default": "middle",
            "enum": [
                "start",
                "middle",
                "end"
            ]
        },
        "text": {
            "type": "string",
            "description": "Sets the text elements associated with each z value."
        },
        "transpose": {
            "type": "boolean",
            "description": "Transposes the z data.",
            "default": false
        },
        "xtype": {
            "type": "string",
            "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
            "enum": [
                "array",
                "scaled"
            ]
        },
        "ytype": {
            "type": "string",
            "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
            "enum": [
                "array",
                "scaled"
            ]
        },
        "zhoverformat": {
            "type": "string",
            "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. See: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format",
            "default": ""
        },
        "hoverongaps": {
            "type": "boolean",
            "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.",
            "default": true
        },
        "connectgaps": {
            "type": "boolean",
            "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array otherwise it is defaulted to false."
        },
        "fillcolor": {
            "type": "string",
            "description": "Sets the fill color if `contours.type` is *constraint*. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available."
        },
        "autocontour": {
            "type": "boolean",
            "description": "Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.",
            "default": true
        },
        "ncontours": {
            "type": "integer",
            "description": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.",
            "default": 15,
            "minimum": 1
        },
        "contours": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.",
                    "default": "levels",
                    "enum": [
                        "levels",
                        "constraint"
                    ]
                },
                "start": {
                    "type": "number",
                    "description": "Sets the starting contour level value. Must be less than `contours.end`",
                    "default": null
                },
                "end": {
                    "type": "number",
                    "description": "Sets the end contour level value. Must be more than `contours.start`",
                    "default": null
                },
                "size": {
                    "type": "number",
                    "description": "Sets the step between each contour level. Must be positive.",
                    "default": null,
                    "minimum": 0
                },
                "coloring": {
                    "type": "string",
                    "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
                    "default": "fill",
                    "enum": [
                        "fill",
                        "heatmap",
                        "lines",
                        "none"
                    ]
                },
                "showlines": {
                    "type": "boolean",
                    "description": "Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.",
                    "default": true
                },
                "showlabels": {
                    "type": "boolean",
                    "description": "Determines whether to label the contour lines with their values.",
                    "default": false
                },
                "labelfont": {
                    "type": "object",
                    "properties": {
                        "family": {
                            "type": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                        },
                        "size": {
                            "type": "number",
                            "minimum": 1
                        },
                        "color": {
                            "type": "string"
                        }
                    }
                },
                "labelformat": {
                    "type": "string",
                    "description": "Sets the contour label formatting rule using d3 formatting mini-language which is very similar to Python, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format",
                    "default": ""
                },
                "operation": {
                    "type": "string",
                    "description": "Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.",
                    "default": "=",
                    "enum": [
                        "=",
                        "<",
                        ">=",
                        ">",
                        "<=",
                        "[]",
                        "()",
                        "[)",
                        "(]",
                        "][",
                        ")(",
                        "](",
                        ")["
                    ]
                },
                "value": {
                    "type": "string",
                    "description": "Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.",
                    "default": 0
                }
            }
        },
        "line": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Sets the color of the contour level. Has no effect if `contours.coloring` is set to *lines*."
                },
                "width": {
                    "type": "number",
                    "description": "Sets the contour line width in (in px) Defaults to *0.5* when `contours.type` is *levels*. Defaults to *2* when `contour.type` is *constraint*.",
                    "minimum": 0
                },
                "dash": {
                    "type": "string",
                    "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                    "default": "solid"
                },
                "smoothing": {
                    "type": "number",
                    "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.",
                    "default": 1,
                    "minimum": 0,
                    "maximum": 1.3
                }
            }
        },
        "zauto": {
            "type": "boolean",
            "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.",
            "default": true
        },
        "zmin": {
            "type": "number",
            "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
            "default": null
        },
        "zmax": {
            "type": "number",
            "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
            "default": null
        },
        "zmid": {
            "type": "number",
            "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
            "default": null
        },
        "colorscale": {
            "type": "string",
            "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.",
            "default": null
        },
        "autocolorscale": {
            "type": "boolean",
            "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
            "default": false
        },
        "reversescale": {
            "type": "boolean",
            "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
            "default": false
        },
        "showscale": {
            "type": "boolean",
            "description": "Determines whether or not a colorbar is displayed for this trace.",
            "default": true
        },
        "colorbar": {
            "type": "object",
            "properties": {
                "thicknessmode": {
                    "type": "string",
                    "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                    "default": "pixels",
                    "enum": [
                        "fraction",
                        "pixels"
                    ]
                },
                "thickness": {
                    "type": "number",
                    "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                    "default": 30,
                    "minimum": 0
                },
                "lenmode": {
                    "type": "string",
                    "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                    "default": "fraction",
                    "enum": [
                        "fraction",
                        "pixels"
                    ]
                },
                "len": {
                    "type": "number",
                    "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                    "default": 1,
                    "minimum": 0
                },
                "x": {
                    "type": "number",
                    "description": "Sets the x position of the color bar (in plot fraction).",
                    "default": 1.02,
                    "minimum": -2,
                    "maximum": 3
                },
                "xanchor": {
                    "type": "string",
                    "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                    "default": "left",
                    "enum": [
                        "left",
                        "center",
                        "right"
                    ]
                },
                "xpad": {
                    "type": "number",
                    "description": "Sets the amount of padding (in px) along the x direction.",
                    "default": 10,
                    "minimum": 0
                },
                "y": {
                    "type": "number",
                    "description": "Sets the y position of the color bar (in plot fraction).",
                    "default": 0.5,
                    "minimum": -2,
                    "maximum": 3
                },
                "yanchor": {
                    "type": "string",
                    "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                    "default": "middle",
                    "enum": [
                        "top",
                        "middle",
                        "bottom"
                    ]
                },
                "ypad": {
                    "type": "number",
                    "description": "Sets the amount of padding (in px) along the y direction.",
                    "default": 10,
                    "minimum": 0
                },
                "outlinecolor": {
                    "type": "string",
                    "description": "Sets the axis line color.",
                    "default": "#444"
                },
                "outlinewidth": {
                    "type": "number",
                    "description": "Sets the width (in px) of the axis line.",
                    "default": 1,
                    "minimum": 0
                },
                "bordercolor": {
                    "type": "string",
                    "description": "Sets the axis line color.",
                    "default": "#444"
                },
                "borderwidth": {
                    "type": "number",
                    "description": "Sets the width (in px) or the border enclosing this color bar.",
                    "default": 0,
                    "minimum": 0
                },
                "bgcolor": {
                    "type": "string",
                    "description": "Sets the color of padded area.",
                    "default": "rgba(0,0,0,0)"
                },
                "tickmode": {
                    "type": "string",
                    "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                    "enum": [
                        "auto",
                        "linear",
                        "array"
                    ]
                },
                "nticks": {
                    "type": "integer",
                    "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                    "default": 0,
                    "minimum": 0
                },
                "tick0": {
                    "type": "string",
                    "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
                },
                "dtick": {
                    "type": "string",
                    "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
                },
                "tickvals": {
                    "type": "string",
                    "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
                },
                "ticktext": {
                    "type": "string",
                    "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."
                },
                "ticks": {
                    "type": "string",
                    "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                    "default": "",
                    "enum": [
                        "outside",
                        "inside",
                        ""
                    ]
                },
                "ticklabelposition": {
                    "type": "string",
                    "description": "Determines where tick labels are drawn.",
                    "default": "outside",
                    "enum": [
                        "outside",
                        "inside",
                        "outside top",
                        "inside top",
                        "outside bottom",
                        "inside bottom"
                    ]
                },
                "ticklen": {
                    "type": "number",
                    "description": "Sets the tick length (in px).",
                    "default": 5,
                    "minimum": 0
                },
                "tickwidth": {
                    "type": "number",
                    "description": "Sets the tick width (in px).",
                    "default": 1,
                    "minimum": 0
                },
                "tickcolor": {
                    "type": "string",
                    "description": "Sets the tick color.",
                    "default": "#444"
                },
                "showticklabels": {
                    "type": "boolean",
                    "description": "Determines whether or not the tick labels are drawn.",
                    "default": true
                },
                "tickfont": {
                    "type": "object",
                    "properties": {
                        "family": {
                            "type": "string",
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                        },
                        "size": {
                            "type": "number",
                            "minimum": 1
                        },
                        "color": {
                            "type": "string"
                        }
                    }
                },
                "tickangle": {
                    "type": "number",
                    "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                    "default": "auto",
                    "minimum": -180,
                    "maximum": 180
                },
                "tickformat": {
                    "type": "string",
                    "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                    "default": ""
                },
                "tickprefix": {
                    "type": "string",
                    "description": "Sets a tick label prefix.",
                    "default": ""
                },
                "showtickprefix": {
                    "type": "string",
                    "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                    "default": "all",
                    "enum": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ]
                },
                "ticksuffix": {
                    "type": "string",
                    "description": "Sets a tick label suffix.",
                    "default": ""
                },
                "showticksuffix": {
                    "type": "string",
                    "description": "Same as `showtickprefix` but for tick suffixes.",
                    "default": "all",
                    "enum": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ]
                },
                "separatethousands": {
                    "type": "boolean",
                    "description": "If \"true\", even 4-digit integers are separated",
                    "default": false
                },
                "exponentformat": {
                    "type": "string",
                    "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                    "default": "B",
                    "enum": [
                        "none",
                        "e",
                        "E",
                        "power",
                        "SI",
                        "B"
                    ]
                },
                "minexponent": {
                    "type": "number",
                    "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                    "default": 3,
                    "minimum": 0
                },
                "showexponent": {
                    "type": "string",
                    "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                    "default": "all",
                    "enum": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ]
                },
                "title": {
                    "type": "object",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated."
                        },
                        "font": {
                            "type": "object",
                            "properties": {
                                "family": {
                                    "type": "string",
                                    "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*."
                                },
                                "size": {
                                    "type": "number",
                                    "minimum": 1
                                },
                                "color": {
                                    "type": "string"
                                }
                            }
                        },
                        "side": {
                            "type": "string",
                            "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
                            "default": "top",
                            "enum": [
                                "right",
                                "top",
                                "bottom"
                            ]
                        }
                    }
                }
            }
        },
        "coloraxis": {
            "type": "string",
            "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
            "default": null
        },
        "xcalendar": {
            "type": "string",
            "description": "Sets the calendar system to use with `x` date data.",
            "default": "gregorian",
            "enum": [
                "gregorian",
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "hebrew",
                "islamic",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "jalali",
                "taiwan",
                "thai",
                "ummalqura"
            ]
        },
        "ycalendar": {
            "type": "string",
            "description": "Sets the calendar system to use with `y` date data.",
            "default": "gregorian",
            "enum": [
                "gregorian",
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "hebrew",
                "islamic",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "jalali",
                "taiwan",
                "thai",
                "ummalqura"
            ]
        },
        "xaxis": {
            "type": "string",
            "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
            "default": "x"
        },
        "yaxis": {
            "type": "string",
            "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
            "default": "y"
        }
    }
}